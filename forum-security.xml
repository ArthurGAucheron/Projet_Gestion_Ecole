<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.2.xsd">
	
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- ////////////////////////////// 1. AUTHENTIFICATION SIMPLE DES UTILISATEURS (PAR DEFAUT) //////////////////////////////////////////// -->
	<!-- //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++ 1.1 STRATEGIE DE SECURITE ++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- 
			sec:http
			*******
			
				> auto-config  : utilisation de la configuration par défaut. formulaire généré dynamiquement, filtre pour gérer la déconnexion 
								 et un service pour connecter automatiquement l'utilisateur
						
		   sec:intercept-url : permet de définir une règle d'interception à appliquer sur un ensemble d'URLs
		   *****************
		   		> pattern : l'URL
		   		> access : le rôle de l'utilisateur
		   		
		   		-> Exemple d'URLs :
		   				-> /** : l'ensemble des URLs
		   				-> /admin/** : l'ensemble des URLs sous le chemin 'admin' ainsi que ses sous chemins
		   				-> /*delete* : l'ensemble des URLs contenant le mot 'delete'
		   				
		   		-> Déf des rôles : le nome doit absolument commencer par 'ROLE_'
		   		
		   		-> il est possibl d'utiliser des expression spEL dans l'attribut 'access'
		   			
		   				-> Pour activer l'utilisation des expressions use-expressions="true"
		   					(les expression sont activées par défaut => true
		   					
		   				-> Une expression peut être associée à des expréssions logique and, or ou et.
		   				
		   				-> Exemple d'expression 
		   				
		   						-> hasRole('ROLE_USER') : renvoie true si le user à le rôle ROLE_USER
		   						
		   						-> hasAnyRole('ROLE_USER', 'ROLE_ADMIN')  renvoie true si le user à au moins un des rôles
		   			
		   						-> .. etc
		   						
		   						-> Exemple : access="hasRole('ROLE_USER') or hasIpdAdresse('127.0.0.1')
	 -->
	<!-- <sec:http auto-config="true" use-expressions="false">
	
		<sec:intercept-url pattern="/**" access="ROLE_USER"/>
		
		<sec:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
	
	</sec:http> -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- ++++++++++++++++++++++ 1.2 DEFINITION DES UTILISATEURS AUTORISES AVEC LEURS ROLES ++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- 
		> Spring security 5 nous oblige à crypter le mot de passe
	 -->
	<!--  <sec:authentication-manager>
		<sec:authentication-provider>
			<sec:password-encoder hash="bcrypt"/>
			<sec:user-service>
				<sec:user name="user1" password="$2a$10$ZRHdjl7l9xh04NUxuyNxKO2kfqQqiOL/vnAqlvtBcVBeqA6uVrQy2"
				authorities="ROLE_USER"/>
			</sec:user-service>
		</sec:authentication-provider>
	</sec:authentication-manager>-->

	<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- ////////////////////// 2. AUTHENTIFICATION AVEC UN FORMULAIRE PERSONNALISE  ///////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++ 2.1 STRATEGIE DE SECURITE ++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- 
		> ROLE_ANONYMOUS : rôle attribué à l'utilisateur qui n'est pas encore authentifié
	 -->
	<sec:http auto-config="true" use-expressions="true"> 
		<!-- 
		<sec:intercept-url pattern="/messageList*" access="ROLE_USER, ROLE_ANONYMOUS"/>
		<sec:intercept-url pattern="/messagePost*" access="ROLE_USER"/>
		<sec:intercept-url pattern="/messageDelete*"  access="ROLE_ADMIN"/>
		 -->
		<sec:intercept-url pattern="/messageList*" access="hasAnyRole('ROLE_USER', 'ROLE_ANONYMOUS')"/>
		<sec:intercept-url pattern="/messagePost*" access="hasRole('ROLE_USER')"/>
		<sec:intercept-url pattern="/messageDelete*"  access="hasRole('ROLE_ADMIN')"/>

	<!-- ======================== Formulaire Personalisé ====================== -->
	<!-- 
		> Config de la balise form-login et ses attributs 
				-> login-page : url qui affiche notre formulaire d'authentification
				-> default-target-url : url vers laquelle le user est redirigé si l'authentification à réussi
				-> authentication-failure-url :url vers laquelle le user est redirigé si l'authentification à échoué.
											   Redirection vers la page du formulaire avec passage d'un param nommé 'error=true'
				-> login-processing-url : url sur laquelle spring security attend les params d'authentification.
										  par défaut '/login'
										  c'est l'url pointée dans l'attribut 'action' de la page login.jsp
	 			-> username-parameter/ password-parameter : nom des params de la requête (attributs name) de la page login.jsp
	 -->
	
	<sec:form-login login-page="/login.jsp"
				    default-target-url="/messageList" 
				    authentication-failure-url="/login.jsp?error=true"
				    login-processing-url="/login"
				    username-parameter="username"
				    password-parameter="password"/>
				    
	<!-- ++++++++++++ Déconnexion de l'utilisateur ++++++++++++++++++ -->
	<!-- 
		> par défaut, l'url de déconnexion est '/logout'
		
		> attributs de la balise 'logout':
					-> logout-success-url : url vers laquelle le user est redirigé si la déconnexion est réussite
											Redirection vers la page 'login.jsp' avec passage d'un param nommé 'logout_message=true'
					-> logout-url : l'url de déconnexion
					
					-> invalidate-session : destruction de la session http
	 -->
	<sec:logout logout-success-url="/login.jsp?logout_message=true"
				logout-url="/logout"
				invalidate-session="true"/>
	<!-- ++++++++++++ Protection contre les attaques CSRF ++++++++++++++++++ -->
	<!-- 
		> CSRF : Cross Site Request Forgery
		> par défaut, la protection est activée
		> activation.désactivation => la balise csrf
	 -->			
	<sec:csrf disabled="true"/>
		<!-- ++++++++++++ configuration des erreurs 403 ++++++++++++++++++ -->
		<!-- 
			> erro-page : url vers laquelle le user sera redirigé en cas d'une erreur 403
		 -->
   <sec:access-denied-handler error-page="/403.jsp" />
   	</sec:http>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- ++++++++++++++++++++++ 2.2 DEFINITION DES UTILISATEURS AUTORISES AVEC LEURS ROLES ++++++++++++++++++++++++ -->
	<!-- 
		> Spring security nous oblige à crypter le mot de passe
	 -->
	
	<!-- 2.1 UTILISATION DU XML -->
	<!-- 
		> L'utilisation du xml est destinnées pour les tests
		> Dans la pratique, on utilise une bdd pour stocker les utilisateurs avec leurs rôles
		
	 -->
	<!--  
	<sec:authentication-manager>
		<sec:authentication-provider>
			<sec:password-encoder hash="bcrypt"/>
			<sec:user-service>
				<sec:user name="user1" password="$2a$10$ZRHdjl7l9xh04NUxuyNxKO2kfqQqiOL/vnAqlvtBcVBeqA6uVrQy2"
				authorities="ROLE_USER"/>
				<sec:user name="admin" password="$2a$10$zvPXcJZvrDLJ9x5z6ShYk.4/NNFenLjQkhHyCuIyUU2iiARbKcyra" authorities="ROLE_USER, ROLE_ADMIN"/>
			</sec:user-service>
		</sec:authentication-provider>
	</sec:authentication-manager>
	-->
	<!-- 2.2 UTILISATION D'UNE BDD -->
	<!-- 
		> 2.2.2.1 Configuration poar défaut : tables USERS - AUTHORITIES 
	 -->
	 <!--  
	 <sec:authentication-manager>
		<sec:authentication-provider>
			<sec:password-encoder hash="bcrypt"/>
			<sec:jdbc-user-service data-source-ref="datasourceBean"/>
		</sec:authentication-provider>
	</sec:authentication-manager>
	-->
		<!-- 
		> 2.2.2.1 Configuration avec notre propre référentiel (nos tables) : tables MEMBER - MEMBER_ROLE 
	 -->
	<sec:authentication-manager>
		<sec:authentication-provider>
			<sec:password-encoder hash="bcrypt"/>
			<sec:jdbc-user-service data-source-ref="datasourceBean" 
								   users-by-username-query="SELECT USERNAME,PASSWORD,ACTIVED FROM MEMBER WHERE USERNAME=?"
								   authorities-by-username-query="SELECT m.username, mr.role FROM member m, member_role mr 
								   WHERE m.id_member = mr.member_id AND m.username=?"/>
		</sec:authentication-provider>
	</sec:authentication-manager>
</beans>
